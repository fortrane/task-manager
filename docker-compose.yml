version: '3.8'

networks:
  task-manager-network:
    driver: bridge

services:
  api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile
    volumes:
      - ./:/app
    ports:
      - "${API_PORT}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "prometheus.scrape=true"
      - "prometheus.port=8000"
      - "prometheus.path=/metrics"
    networks:
      - task-manager-network

  telegram-bot:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile
    command: python -m app.telegram.bot
    volumes:
      - ./:/app
    depends_on:
      - api
    env_file:
      - .env
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=8000"
      - "prometheus.path=/metrics"
    networks:
      - task-manager-network

  postgres:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=5432"
    networks:
      - task-manager-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  traefik:
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80"
      - "${TRAEFIK_DASHBOARD_PORT}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=8080"
      - "prometheus.path=/metrics"
    networks:
      - task-manager-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./infrastructure/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - "${PROMETHEUS_PORT}:9090"
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    networks:
      - task-manager-network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    networks:
      - task-manager-network

  jenkins:
    image: jenkins/jenkins:latest
    privileged: true
    user: root
    ports:
      - "${JENKINS_PORT}:8080"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`jenkins.localhost`)"
      - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
    networks:
      - task-manager-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  jenkins_home: